(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{563:function(t,e,s){"use strict";s.r(e);var a=s(40),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"理解lifecycle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解lifecycle"}},[t._v("#")]),t._v(" 理解lifeCycle")]),t._v(" "),s("h2",{attrs:{id:"类组件生命周期介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类组件生命周期介绍"}},[t._v("#")]),t._v(" 类组件生命周期介绍")]),t._v(" "),s("p",[s("strong",[t._v("铺垫：")]),t._v(" React的两个重要阶段，分别是render阶段和commit阶段，React在调和(render)阶段会深度遍历React fiber树，目的就是发现不同(diff), 不同的地方就是接下来需要更新的地方，对于变化的组件，就会执行render函数。在一次调和过程完毕之后，就到了commit阶段，commit阶段会创建修改真实的DOM节点。")]),t._v(" "),s("p",[t._v("如果在一次调和的过程中，发现了一个 "),s("code",[t._v("fiber tag = 1")]),t._v(" 的情况，就会按照类组件的逻辑来处理。对于类组件的处理逻辑，首先判断类组件是否已经创建过。")]),t._v(" "),s("h2",{attrs:{id:"react类组件生命周期执行过程探秘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react类组件生命周期执行过程探秘"}},[t._v("#")]),t._v(" React类组件生命周期执行过程探秘")]),t._v(" "),s("p",[t._v("React的大部分生命周期的执行，都在"),s("code",[t._v("mountClassInstance")]),t._v("和 "),s("code",[t._v("updateClassInstance")]),t._v(" 这两个方法中执行。方便理解，将这两个方法简化成mount(初始化渲染) 和 update(更新)两个方向。")]),t._v(" "),s("p",[t._v("这里为了学习方便理解，将生命周期的执行流程分为"),s("strong",[t._v("组件初始化")]),t._v("，"),s("strong",[t._v("组件更新")]),t._v(", "),s("strong",[t._v("组件销毁")]),t._v("三大阶段。")]),t._v(" "),s("h3",{attrs:{id:"初始化阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段"}},[t._v("#")]),t._v(" 初始化阶段")]),t._v(" "),s("p",[t._v("constructor执行")]),t._v(" "),s("p",[t._v("在mount阶段，首先执行的是constructorClassInstance函数，用来实例化组件。")]),t._v(" "),s("p",[t._v("在实例化组件之后，会调用mountClassInstance进行组件初始化。")]),t._v(" "),s("p",[t._v("那么我们来看一下 mountClassInstance 做了一些什么工作？")]),t._v(" "),s("p",[t._v("①"),s("strong",[t._v("getDerivedStateFromProps执行")])]),t._v(" "),s("p",[t._v("在初始化阶段，"),s("code",[t._v("getDerivedStateFromProps")]),t._v("是第二个执行的生命周期，值得注意的是它是从ctor类上直接绑定的静态方法，传入props,state。返回值和之前的state合并，作为新的state，传递给组件实例使用。")]),t._v(" "),s("p",[t._v("②"),s("strong",[t._v("componentWillMount执行")])]),t._v(" "),s("p",[t._v("如果存在"),s("code",[t._v("getDerivedStateFromProps")]),t._v(" 和 "),s("code",[t._v("getSnapshotBeforeUpdate")]),t._v(" 就不会执行 "),s("code",[t._v("componentWillMount")]),t._v("。")]),t._v(" "),s("p",[t._v("③"),s("strong",[t._v("render执行")])]),t._v(" "),s("p",[t._v("到此为止"),s("code",[t._v("mountClassInstance")]),t._v("函数完成，但是上面 "),s("code",[t._v("updateClassComponent")]),t._v("函数，在执行完mountClassInstance后，执行了render渲染函数，形成了children,接下来React调用reconcileChildren方法深度调用children。")]),t._v(" "),s("p",[t._v("④"),s("strong",[t._v("componentDidMount执行")])]),t._v(" "),s("p",[t._v("在前面，我们说过，有render和commit两个阶段。前面介绍的几个生命周期函数都是在render阶段执行的，一旦React调和完所有的fiber节点，就会到commit阶段，在组件初始化commit阶段，会调用"),s("code",[t._v("componentDidMount")]),t._v("生命周期。")]),t._v(" "),s("p",[s("code",[t._v("componentDidMount")]),t._v("执行时机 和 "),s("code",[t._v("componentDidUpdate")]),t._v(" 执行时机是相同的，只不过一个是针对初始化，一个是针对组件更新。到初始化阶段，生命周期执行完毕。")]),t._v(" "),s("p",[t._v("执行顺序：constructor -> getDerivedStateFromProps / componentWillMount -> render -> componentDidMount")]),t._v(" "),s("p",[t._v("说完了初始化阶段，我们再来分析一下组件更新中，会有哪些生命周期执行呢？")]),t._v(" "),s("h3",{attrs:{id:"更新阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新阶段"}},[t._v("#")]),t._v(" 更新阶段")]),t._v(" "),s("p",[t._v("在"),s("code",[t._v("updateClassComponent")]),t._v("函数中，当发现current不为null的情况时，说明类组件被挂载过，那么直接按照更新逻辑处理。")]),t._v(" "),s("p",[t._v("①执行生命周期 "),s("strong",[t._v("componentWillReceiveProps")])]),t._v(" "),s("p",[t._v("首先判断 "),s("code",[t._v("getDerivedStateFromProps")]),t._v(" 生命周期是否存在，如果不存在就执行 "),s("code",[t._v("componentWillReceiveProps")]),t._v(" 生命周期。传入该生命周期两个参数，分别是NewProps和nextContext。")]),t._v(" "),s("p",[t._v("② 执行生命周期 "),s("strong",[t._v("getDerivedStateFromProps")])]),t._v(" "),s("p",[t._v("接下来执行生命周期 "),s("code",[t._v("getDerivedStateFromProps")]),t._v(", 返回的值用于合并state,生成新的state。")]),t._v(" "),s("p",[t._v("③执行生命周期 "),s("strong",[t._v("shouldComponentUpdate")])]),t._v(" "),s("p",[t._v("接下来执行生命周期 "),s("code",[t._v("shouldComponentUpdate")]),t._v(", 传入新的props, 新的state, 和新的context, 返回值决定是否继续执行render函数，和调和子节点。上面提到的 "),s("code",[t._v("getDerivedStateFromProps")]),t._v("的返回值作为新的state,传递给 "),s("code",[t._v("shouldComponentUpdate")]),t._v("。")]),t._v(" "),s("p",[t._v("④执行生命周期 "),s("strong",[t._v("componentWillUpdate")])]),t._v(" "),s("p",[t._v("接下来执行生命周期 componentWillUpdate。 updateClassInstance方法到此执行完毕了。")]),t._v(" "),s("p",[t._v("⑤执行"),s("strong",[t._v("render")])]),t._v(" "),s("p",[t._v("接下来执行render函数，得到最新的 React element元素。然后继续调和子节点。")]),t._v(" "),s("p",[t._v("⑥执行 "),s("strong",[t._v("getSnapshotBeforeUpdate")])]),t._v(" "),s("p",[s("code",[t._v("getSnapshotBeforeUpdate")]),t._v("的执行也是在commit阶段，commit阶段细分为 "),s("code",[t._v("before Mutation")]),t._v("(DOM修改前)，"),s("code",[t._v("Mutation")]),t._v("(DOM修改)， "),s("code",[t._v("Layout")]),t._v("(DOM修改后)三个阶段，getSnapshotBeforeUpdate发生在 "),s("code",[t._v("before Mutation")]),t._v("阶段，生命周期的返回值，将作为第三个参数__reactInternalSnapshotBeforeUpdate传递给componentDidUpdate。")]),t._v(" "),s("p",[t._v("⑦执行 "),s("strong",[t._v("componentDidUpdate")])]),t._v(" "),s("p",[t._v("接下来执行生命周期 componentDidUpdate, 此时 DOM已经修改完成。可以操作修改之后的DOM。到此为止更新阶段的生命周期执行完毕。")]),t._v(" "),s("p",[t._v("更新阶段对应的生命周期的执行顺序：")]),t._v(" "),s("p",[t._v("componentWillReceiveProps（props改变）/ getDerivedStateFromProps -> shouldComponentUpdate -> componentWillUpdate -> render -> getSnapshotBeforeUpdate -> componentDidUpdate")]),t._v(" "),s("h3",{attrs:{id:"销毁阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#销毁阶段"}},[t._v("#")]),t._v(" 销毁阶段")]),t._v(" "),s("p",[t._v("①执行生命周期 "),s("strong",[t._v("componentWillUnmount")])]),t._v(" "),s("p",[t._v("销毁阶段就比较简单了，在一次调和更新中，如果发现元素被移除，就会打对应的 Deletion标签，然后在commit阶段就会调用 "),s("code",[t._v("componentWillUnmount")]),t._v(" 生命周期，接下来统一卸载组件以及DOM元素。")]),t._v(" "),s("h3",{attrs:{id:"react各阶段生命周期能做些什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react各阶段生命周期能做些什么"}},[t._v("#")]),t._v(" React各阶段生命周期能做些什么")]),t._v(" "),s("h4",{attrs:{id:"_1-constructor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-constructor"}},[t._v("#")]),t._v(" 1 constructor")]),t._v(" "),s("p",[t._v("React在不同的时期抛出不同的生命周期钩子，也就意味着这些生命周期钩子不同的使命。constructor在类组件创建实例时调用，而且在初始化的时候执行一次，所以constructor可以做一些初始化的工作。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("         "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行super 传递props，才能在接下来的上下文中获取props")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 初始化state")]),t._v("\n        name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"guoerdan"')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleClick "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定this")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleInputChange "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debounce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("handleInputChange"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 绑定防抖函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _render "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("render")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("_render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 劫持修改类组件上的一些生命周期")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 点击事件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleClick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表单输入")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleInputChange")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("constructor作用：")]),t._v(" "),s("ul",[s("li",[t._v("初始化state,可以用来截取路由参数，赋值给state。")]),t._v(" "),s("li",[t._v("对类组件的事件做一些处理，比如绑定this, 防抖，节流等。")]),t._v(" "),s("li",[t._v("对类组件进行一些必要生命周期的劫持，渲染劫持。")])]),t._v(" "),s("h4",{attrs:{id:"_2-getderivedstatefromprops"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-getderivedstatefromprops"}},[t._v("#")]),t._v(" 2 getDerivedStateFromProps")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDerivedStateFromProps")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextProps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prevState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("两个参数：")]),t._v(" "),s("ul",[s("li",[t._v("nextProps 父组件新传递的props")]),t._v(" "),s("li",[t._v("prevState 组件在此次更新前的state")])]),t._v(" "),s("p",[t._v("这个生命周期用于，在初始化和更新阶段，接受父组件的props数据，可以对props进行格式化，过滤等操作；返回值将作为新的state合并到state中，供给视图渲染消费。")]),t._v(" "),s("p",[t._v("只要组件更新，就会执行"),s("code",[t._v("getDerivedStateFromProps")]),t._v(",不管是props改变，还是setState,或者是forceUpdate。")]),t._v(" "),s("p",[t._v("getDerivedStateFromProps作用：")]),t._v(" "),s("ul",[s("li",[t._v("代替 componentWillMount 和 componentWillReceiveProps")]),t._v(" "),s("li",[t._v("组件初始化或更新时，将props映射到state")]),t._v(" "),s("li",[t._v("返回值与state合并完，可以作为shouldComponentUpdate的第二个参数newState,可以判断是否需要渲染组件。")])]),t._v(" "),s("h4",{attrs:{id:"componentwillmount"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentwillmount"}},[t._v("#")]),t._v(" componentWillMount")]),t._v(" "),s("p",[t._v("componentWillMount 还是用来做一些初始化操作，但是不建议在这个生命周期写，毕竟未来很有可能取缔它。")]),t._v(" "),s("h4",{attrs:{id:"componentwillreceiveprops"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#componentwillreceiveprops"}},[t._v("#")]),t._v(" componentWillReceiveProps")]),t._v(" "),s("ul",[s("li",[t._v("用来监听父组件是否执行render")]),t._v(" "),s("li",[t._v("可以用来接受props改变，组件可以")])])])}),[],!1,null,null,null);e.default=n.exports}}]);